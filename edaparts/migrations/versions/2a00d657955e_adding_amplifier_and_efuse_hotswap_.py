"""Adding amplifier and efuse/hotswap component

Revision ID: 2a00d657955e
Revises: f1ad6c343ede
Create Date: 2024-12-09 20:49:23.022929

"""

import pathlib
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy import text

# revision identifiers, used by Alembic.
revision: str = "2a00d657955e"
down_revision: Union[str, None] = "f1ad6c343ede"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "comp_amplifier",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("gain_bandwidth", sa.String(length=30), nullable=True),
        sa.Column("output_type", sa.String(length=50), nullable=True),
        sa.Column("input_type", sa.String(length=50), nullable=True),
        sa.Column("amplifier_type", sa.String(length=50), nullable=True),
        sa.Column("slew_rate", sa.String(length=30), nullable=True),
        sa.Column("voltage_supplies", sa.String(length=30), nullable=True),
        sa.Column("voltage_input_offset", sa.String(length=30), nullable=True),
        sa.Column("current_output", sa.String(length=30), nullable=True),
        sa.Column("number_of_channels", sa.String(length=30), nullable=True),
        sa.Column("current_quiescent", sa.String(length=30), nullable=True),
        sa.Column("cmrr", sa.String(length=30), nullable=True),
        sa.Column("voltage_common_mode_max", sa.String(length=30), nullable=True),
        sa.Column("voltage_input_max", sa.String(length=30), nullable=True),
        sa.Column("bandwidth", sa.String(length=30), nullable=True),
        sa.Column("features", sa.String(length=250), nullable=True),
        sa.ForeignKeyConstraint(
            ["id"],
            ["component.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "comp_power_management_efuse_hotswap",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("fet_type", sa.String(length=50), nullable=True),
        sa.Column("rds_on", sa.String(length=30), nullable=True),
        sa.Column("current_max", sa.String(length=30), nullable=True),
        sa.Column("current_min", sa.String(length=30), nullable=True),
        sa.Column("voltage_input_min", sa.String(length=30), nullable=True),
        sa.Column("voltage_input_max", sa.String(length=30), nullable=True),
        sa.Column("current_over_response", sa.String(length=50), nullable=True),
        sa.Column("voltage_over_response", sa.String(length=50), nullable=True),
        sa.Column("features", sa.String(length=250), nullable=True),
        sa.ForeignKeyConstraint(
            ["id"],
            ["component.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    # Search for all the views creation SQL files
    create_views = [
        sql_file
        for sql_file in pathlib.Path(__file__)
        .parent.parent.joinpath("views", revision)
        .glob("Create*.sql")
    ]
    # Run the views creation scripts
    for view_file in create_views:
        with open(view_file, "r") as f:
            op.get_bind().execute(text(f.read()))
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Drop the views
    with open(
        pathlib.Path(__file__).parent.parent.joinpath(
            "views", revision, "DropViews.sql"
        ),
        "r",
    ) as f:
        op.get_bind().execute(text(f.read()))
    op.drop_table("comp_power_management_efuse_hotswap")
    op.drop_table("comp_amplifier")
    # ### end Alembic commands ###
